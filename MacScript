#!/bin/bash


# Global Variables for simplicity
SUDOCREDCACHED=1
compName=""
my_name=$(basename -- "$0")
mydir=$(dirname "$0")
adminPW=""
currUser="$(whoami)"
rdpSetupConfirm=0



# Focus an app
function focusApp() {
    osascript <<EOT
        tell app "$*"
        activate
        end tell
EOT
}

function rdpSetup() {
	echo "Does this user require a Remote Desktop Program? (y/n) (Applies to mobile device setups)"
	printf ">: "
	read rdpRequest
	
	if [[ $rdpRequest == "y" || $rdpRequest == "Y" ]]; then
		rdpSetupConfirm=1
		echo "Opening Windows Remote Desktop Beta Download, once downloaded unzip file and move to applications"
		sleep 1
		
		open https://rink.hockeyapp.net/api/2/apps/5e0c144289a51fca2d3bfa39ce7f2b06/app_versions/264?format=zip&avtoken=3a760ab25f42caf3a342f88491f3eca9c496679b&download_origin=hockeyapp

		echo "Downloading program, once downloaded we will proceed (next step in about 10-15 seconds)."
		sleep 15

		mv /Users/admin/Downloads/Microsoft\ Remote\ Desktop\ Beta.app /Applications

		echo "Closing safari"
		sleep 1
		osascript -e 'quit application "Safari"'
		
		echo "Remote Desktop loaded.  Proceeding to next step."
		sleep 2
	fi

	sleep 3
}

function reloadApps() {
	# Install the necessary applications
	brew cask install adobe-acrobat-reader
	brew cask install microsoft-office
	brew cask install zoomus
	brew cask install zoomus-outlook-plugin
	brew cask install teamviewer
	brew cask install dropbox
	brew cask install google-chrome
	brew cask install slack

	# See if user requires a remote desktop application
	rdpSetup
	
	# Redo the application layout
	appLayout
}

function updateSystem() {
	read -p "Press Enter when ready to restart the computer [ENTER]>: "

	# Should allow the "Other" user to appear on startup more consistently
	echo "$adminPW" | sudo defaults write /Library/Preferences/com.apple.loginwindow SHOWOTHERUSERS_MANAGED -bool TRUE

	sleep 1

	echo "$adminPW" | sudo -S sh -c "softwareupdate -ia && reboot"
}

function appValidate() {
	# Update Operating System and preinstalled apps
	echo ""
	echo "Please check that all applications have been downloaded correctly."
	sleep 2
	echo ""
	echo "Did all applications download properly? (y/n) do not capitalize."
	printf ">: "
	read downloadResponse
	
	if [ $downloadResponse != 'y' ]; then
		caffeinate -u sh /Users/Shared/"${my_name}" -appLoad
	fi
}

function appsDownloaded() {
	echo ""
	echo "Checking to make sure all applications have downloaded successfully."
	sleep 1
	Apps=( "Adobe Acrobat Reader DC.app" "Dropbox.app" "Google Chrome.app" "Microsoft Excel.app" "Slack.app" "TeamViewer.app" "Zoom.us.app" )
	downloadConfirmed=1
	app_path=""
	for i in "${Apps[@]}"
	do
		app_path="/Applications"
		app_path += "$i"
		if [ $(find "/Applications/" -name "$i") ]; then
			echo "Confirmed $i installed!"
			sleep .5
		else
			downloadConfirmed=0
			break;
		fi
	done

	if [ $downloadConfirmed == 0 ]; then
		caffeinate -u sh /Users/Shared/"${my_name}" -appLoad
	fi

}

function appLayout() {
	# Set the Dock to default values
	#defaults delete com.apple.dock; killall Dock
	#dockutil --remove all

	#sleep 1
	#dockutil --add /Applications/Firefox.app
	#dockutil --add /Applications/LaunchPad.app
	#dockutil --add /Applications/Safari.app
	#dockutil --add /Applications/Google\ Chrome.app
	#dockutil --add /Applications/Slack.app
	#dockutil --add /Applications/Adobe\ Acrobat\ Reader\ DC.app
	#dockutil --add /Applications/Microsoft\ Outlook.app
	#dockutil --add /Applications/Microsoft\ Powerpoint.app
	#dockutil --add /Applications/Microsoft\ Word.app
	#dockutil --add /Applications/Microsoft\ Excel.app
	#dockutil --add /Applications/Zoom.us.app
	#dockutil --add /Applications/TeamViewer.app
	#dockutil --add /Applications/System\ Preferences.app

	dockutil --remove all
	sleep 1
	dockutil --add /Applications/LaunchPad.app --no-restart
	sleep .5
	dockutil --add /Applications/Safari.app --no-restart
	sleep .5
	dockutil --add /Applications/Google\ Chrome.app --no-restart
	sleep .5
	dockutil --add /Applications/Slack.app --no-restart
	sleep .5
	dockutil --add /Applications/Adobe\ Acrobat\ Reader\ DC.app --no-restart
	sleep .5
	dockutil --add /Applications/Microsoft\ Outlook.app --no-restart
	sleep .5
	dockutil --add /Applications/Microsoft\ Powerpoint.app --no-restart
	sleep .5
	dockutil --add /Applications/Microsoft\ Word.app --no-restart
	sleep .5
	dockutil --add /Applications/Microsoft\ Excel.app --no-restart
	sleep .5
	dockutil --add /Applications/Zoom.us.app --no-restart
	sleep .5
	dockutil --add /Applications/TeamViewer.app --no-restart
	sleep .5
	if [ $rdpSetupConfirm == 1 ]; then
		dockutil --add /Applications/Microsoft\ Remote\ Desktop\ Beta.app --no-restart
		sleep .5
	fi
	dockutil --add /Applications/System\ Preferences.app
	sleep .5

	echo "Layout Completed"
	sleep 2
}

function printerCheck() {
	echo ""
	echo "Would you like to add the office printers? (case matters)"
	printf ">: "
	read printChoice

	if [[ $printChoice == "y" || $printChoice == "Y" ]]; then
	
		echo "To add the printers you will need to know the Site Code, would you like to see a list of the Site Codes? (y/n)"
		printf ">: "
		read siteList

		if [[ $siteList == "y" || $siteList == "Y" ]]; then
			echo "Site Code List:"
			echo "-------------------------"
			echo "BV = Bellevue"
			echo "BD = Boulder"
			echo "CH = Chicago"
			echo "HH = Hamburg"
			echo "HK = Hong Kong"
			echo "IR = Irvine"
			echo "LD = London"
			echo "LA = Los Angeles"
			echo "NY = New York"
			echo "SF = San Francisco"
			echo "SJ = San Jose"
			echo "ST = Seattle"
			echo "SG = Singapore"
			echo "SY = Sydney"
			echo "VT = Ventura (HQ 42)"
			echo "VN = Ventura (101)\n"
			sleep 1
		fi
	fi

	while [[ $printChoice == "y" || $printChoice == "Y"  ]]; do
		echo "Type in the site code of the office you want to add the printers of (VT, VN, NY, CH, etc). Case Matters"
		printf ">: "
		read siteCode

		if [ $siteCode == "BV" ]; then
			echo "Adding Bellevue Printers"
			lpadmin -p "BVPR01" -v "http://10.32.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "BVPR01 Added!"

		elif [ $siteCode == "BD" ]; then
			echo "Adding Boulder Printers"
			lpadmin -p "BDPR01" -v "http://10.5.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "BDPR01 Added!"
			lpadmin -p "BDPR02" -v "http://10.5.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "BDPR02 Added!"
			

		elif [ $siteCode == "CH" ]; then
			echo "Adding Chicago Printers"
			lpadmin -p "CHPR01" -v "http://10.6.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "CHPR01 Added!"
			lpadmin -p "CHPR02" -v "http://10.6.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "CHPR02 Added!"

		elif [ $siteCode == "HH" ]; then
			echo "Adding Hamburg Printers"
			lpadmin -p "HHPR01" -v "http://10.14.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "HHPR01 Added!"
			lpadmin -p "HHPR02" -v "http://10.14.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "HHPR02 Added!"

		elif [ $siteCode == "HK" ]; then
			echo "Adding Hong Kong Printers"
			lpadmin -p "HKPR01" -v "http://10.17.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "HKPR01 Added!"
			lpadmin -p "HKPR02" -v "http://10.17.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "HKPR02 Added!"

		elif [ $siteCode == "IR" ]; then
			echo "Adding Irvine Printers"
			lpadmin -p "IRPR01" -v "http://10.31.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "IRPR01 Added!"

		elif [ $siteCode == "LD" ]; then
			echo "Adding London Printers"
			lpadmin -p "LDPR01" -v "http://10.13.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "LDPR01 Added!"
			lpadmin -p "LDPR02" -v "http://10.13.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "LDPR02 Added!"

		elif [ $siteCode == "LA" ]; then
			echo "Adding Los Angeles Printers"
			lpadmin -p "LAPR01" -v "http://10.33.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "LAPR01 Added!"
			lpadmin -p "LAPR02" -v "http://10.33.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "LAPR02 Added!"

		elif [ $siteCode == "NY" ]; then
			echo "Adding New York Printers"
			lpadmin -p "NYPR01" -v "http://10.4.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "NYPR01 Added!"
			lpadmin -p "NYPR02" -v "http://10.4.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "NYPR02 Added!"
			lpadmin -p "NYPR03" -v "http://10.4.5.3" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "NYPR03 Added!"
			lpadmin -p "NYPR04" -v "http://10.4.5.4" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "NYPR04 Added!"
			lpadmin -p "NYPR05" -v "http://10.4.5.5" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "NYPR05 Added!"
		
		elif [ $siteCode == "SF" ]; then
			echo "Adding San Francisco Printers"
			lpadmin -p "SFPR01" -v "http://10.3.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "SFPR01 Added!"

		elif [ $siteCode == "SJ" ]; then
			echo "Adding San Jose Printers"
			lpadmin -p "SJPR01" -v "http://10.30.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "SJPR01 Added!"

		elif [ $siteCode == "ST" ]; then
			echo "Adding Seattle Printers"
			lpadmin -p "STPR01" -v "http://10.23.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "STPR01 Added!"

		elif [ $siteCode == "SG" ]; then
			echo "Adding Singapore Printers"
			lpadmin -p "SGPR01" -v "http://10.11.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "SGPR01 Added!"

		elif [ $siteCode == "SY" ]; then
			echo "Adding Sydney Printers"
			lpadmin -p "SYPR01" -v "http://10.29.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "SYPR01 Added!"
			lpadmin -p "SYPR02" -v "http://10.29.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "SYPR02 Added!"

		elif [ $siteCode == "VT" ]; then
			echo "Adding Ventura (HQ) Printers"
			lpadmin -p "VTPR01" -v "http://10.1.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VTPR01 Added!"
			lpadmin -p "VTPR02" -v "http://10.1.5.2" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VTPR02 Added!"
			lpadmin -p "VTPR03" -v "http://10.1.5.3" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VTPR03 Added!"
			lpadmin -p "VTPR06" -v "http://10.1.5.6" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VTPR06 Added!"
			lpadmin -p "VTPR07" -v "http://10.1.5.7" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VTPR07 Added!"

		elif [ $siteCode == "VN" ]; then
			echo "Adding Ventura (101) Printers"
			lpadmin -p "VNPR01" -v "http://10.9.5.1" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VNPR01 Added!"
			lpadmin -p "VNPR12" -v "http://10.9.5.12" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VNPR12 Added!"
			lpadmin -p "VNPR03" -v "http://10.9.5.3" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VNPR03 Added!"
			lpadmin -p "VNPR04" -v "http://10.9.5.4" -P "/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/Resources/Generic.ppd" -o "APOptionalDuplexer=True" -E
			echo "VNPR04 Added!"
		fi
		
		echo "Would you like to add any other Office Site Printers? (y/n)"
		read printChoice
	done

	echo "Closing printer setup"
}

function computerRename() {
	# Modify the name of the computer
	echo "Do you need to rename the computer? (y/n)"
	printf ">: "
	read renameRequest

	if [[ $renameRequest == "y" || $renameRequest == "Y" ]]; then
		echo ""
		echo "What would you like to name the computer (typically this is first initial last name)?"
		printf ">: "
		read compName
		echo ""
		echo "A pop up will appear twice to set the name, fill it in twice"
		sleep 2
		scutil --set ComputerName $compName
		scutil --set LocalHostName $compName
	else 
		echo "Skipping computer naming prompt"
		sleep 1
		echo ""
	fi
	
}

function activeDirectoryJoin() {
	# Modify the name of the computer
	echo "Do you need to add the computer to the domain? (y/n)"
	printf ">: "
	read domainRequest

	if [[ $domainRequest == "y" || $domainRequest == "Y" ]]; then
		# Loop until the computer is properly binded
		adSuccess="n"
		while [ $adSuccess != "y" ]; do
			echo ""
			echo "Type in your AD Account (whole email address) name with binding rights"
			printf ">: "
			read adName
			
			echo ""
			echo "Type in the AD Account Password:"
			printf ">: "
			read -s pwName

			echo ""
			
			# Connect it to the AD
			dsconfigad -a $compName -domain thetradedesk.com -u $adName -p $pwName -mobile enable -mobileconfirm disable -localhome enable
			echo ""
			echo "Was the AD Join successful? (y/n) This is case sensitive"
			printf ">: "
			read adSuccess
		done
	else
		echo "Skipping domain join process..."
		sleep 1
		echo ""
	fi

	# Add the login options for the computer
	echo ""
	echo "Open up System Preferences -> Users -> Login Options -> Add Current User, Desktop Admins and User Admins"
	sleep 1
	#osascript -e 'activate application "System Preferences"'
	echo ""
	read -p "Press Enter to continue once completed with the step above [ENTER]>: "
}

function credentialCache() {
	# Keeps the admin password in a cache temporarily (or at least attempts to)
	echo ""
	echo "Type in the Admin password here to cache it for further requests (still may prompt)"
	SUDOCREDCACHED=1
	
	while [ $SUDOCREDCACHED != 0 ]; do
		printf ">: "
		read -s adminPW
		
		echo "$adminPW" | sudo -S -v
		
		sudo -nv 2> /dev/null
		SUDOCREDCACHED=$?
		if [ $SUDOCREDCACHED != 0 ] ; then 
		  echo "Incorrect Password, try again"
		  sudo -k
		fi
	done
}

function homebrewInstall() {
	# Add permissions for App Setup
	if [ $adminPW == "" ]; then
		credentialCache
	else
		echo "$adminPW" | sudo -S -v
	fi

	sleep 1
	echo ""
	echo "A lot of text is about to appear, but that's okay!"
	sleep 2

	# Load homebrew onto computer temporarily
	yes '' | /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

	# Make sure home brew is updated
	brew update
	
	# Install DockUtil for the user setup
	brew install dockutil

	# Install cask to download applications
	brew install cask

	# Install Duti to set default applications
	brew install duti

	# Cleanup the unneeded files
	brew cleanup
	
	# Allow other users to utilize Homebrew
	chgrp -R admin /usr/local/*
	chmod -R g+w /usr/local/*
}

function brewCheck() {
	which -s brew
	if [[ $? != 0 ]] ; then
		# Install Homebrew
		homebrewInstall
	else
		brew update
	fi
}

function permissionsFix() {
	echo ""
	echo "Fixing permissions on the applications"


	sudo xattr -d -r com.apple.quarantine /Applications/Slack.app
	sudo xattr -d -r com.apple.quarantine /Applications/Google\ Chrome.app
	sudo xattr -d -r com.apple.quarantine /Applications/Adobe\ Acrobat\ Reader\ DC.app
	sudo xattr -d -r com.apple.quarantine /Applications/Microsoft\ Outlook.app
	sudo xattr -d -r com.apple.quarantine /Applications/Microsoft\ Powerpoint.app
	sudo xattr -d -r com.apple.quarantine /Applications/Microsoft\ Word.app
	sudo xattr -d -r com.apple.quarantine /Applications/Microsoft\ Excel.app
	sudo xattr -d -r com.apple.quarantine /Applications/Zoom.us.app
	sudo xattr -d -r com.apple.quarantine /Applications/TeamViewer.app
	sudo xattr -d -r com.apple.quarantine /Applications/ZoomOutlookPlugin
	sudo xattr -d -r com.apple.quarantine /Applications/Dropbox.app
}

function smartSheetsPrompt() {
	echo ""
	echo "Don't forget to add this computer to SmartSheets"
	system_profiler SPHardwareDataType |grep "Serial"
	sleep 1
	
	echo ""
	read -p "Press Enter when ready to continue with the script [ENTER]>: "
}

function scriptCopy() {
	# Make a copy of the script in the shared folder
	echo ""
	echo 'Making a copy of the script in the shared folder "/Users/Shared"'
	mydir=$(dirname "$0")
	cp "${mydir}"/"${my_name}" /Users/Shared
}

function sophosSecurity() {
	# Enable Firewall
	echo ""
	echo "Enabling FireWall"
	sleep 1
	sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1
	echo "Firewall Enabled"
	sleep 1

	echo "Enabling Fast User Switching"
	sleep 1
	sudo defaults write /Library/Preferences/.GlobalPreferences MultipleSessionEnabled -bool 'yes'
	sudo defaults write ~/Library/Preferences/com.apple.systemuiserver.plist menuExtras -array-add '<string>/System/Library/CoreServices/Menu Extras/User.menu</string>'


	echo "Fast User Switching Enabled"
	sleep 1
	
	echo "$adminPW" | sudo -S -v
	
	# Download Sophos files
	cd /Users/Shared

	mkdir SophosInstall
		
	curl -O https://dzr-api-amzn-us-west-2-fa88.api-upe.p.hmr.sophos.com/api/download/3630f6d5ccfb1605df373ca13e22df13/SophosInstall.zip
	
	unzip SophosInstall.zip -d /Users/Shared/SophosInstall
	
	# Install Sophos onto the computer
	echo ""
	echo "Installing Sophos"
	sleep 1
	
	sudo chmod a+x /Users/Shared/SophosInstall/Sophos\ Installer.app/Contents/MacOS/Sophos\ Installer
	sudo chmod a+x /Users/Shared/SophosInstall/Sophos\ Installer.app/Contents/MacOS/tools/com.sophos.bootstrap.helper

	# Install Sophos from within folder (this will open another menu)
	#sh -c "sudo /Users/Shared/SophosInstall/Sophos\ Installer.app/Contents/MacOS/Sophos\ Installer --install"
	
	open /Users/Shared/SophosInstall/Sophos\ Installer.app
	
	read -p "Press Enter once Sophos has been installed [ENTER]>: "

	rm -rf SophosInstall.zip

	# Removing the sophos installer
	rm -rf SophosInstall
}

function unbindUser() {
	echo ""
	echo "Type in your AD Account (whole email address) name with binding rights"
	read adName
	printf ">: "
	dsconfigad -f -r -u $adName
}

function addAdmin() {
	isAdmin=0
	
	#echo "Type in the Admin Password to join computer as admin (may be prompted twice)."
	#su admin -c "sudo dscl . -merge /Groups/admin GroupMembership $currUser"

	while [ $isAdmin != 1 ]; do
	# Login as admin temporarily
		echo ""
		echo "Logging in as Local Admin to give this user admin rights"
		sleep 1
		echo ""
		echo "Type in Local admin password (you may be prompted twice)"
		su admin -c "sudo dscl . -merge /Groups/admin GroupMembership $currUser"

		if groups $currUser | grep -q -w admin; 
		then 
			isAdmin=1
		else 
			echo ""
			echo "Did not add user successfully, try again"
		fi
	done
	# Keeps the admin password in a cache temporarily (or at least attempts to)
	echo ""
	echo "Added $currUser as an administrator for the computer!"
	sleep 1
}

function merakiSetup() {
	echo ""
	echo "Opening Safari for you to install Meraki onto the computer"
	sleep 2
	open https://m.meraki.com
	read -p "Press Enter once you have added the computer to Meraki [ENTER]>: "
	
	echo ""
	echo "Loading the second part of the Meraki installation"
	sleep 2
	curl -O https://n196.meraki.com/ci-downloads/121c309f9c83aa472e6bbd230cdf37c728582ab7/MerakiPCCAgent.pkg
	open MerakiPCCAgent.pkg
	echo ""
	read -p "Press Enter once you have finished the second part of the Meraki installation [ENTER]>: "
	osascript -e 'quit application "Safari"'
}

function secureTokenSetup() {
	echo ""
	echo "Checking secure token status."
	sleep 2
	
	currUser="$(whoami)"
	echo $currUser
	
	# Check if the user has the secure token enabled
	echo "You will be prompted a few times to type in the admin password, then once for the user password"
	sleep 1
	su admin -c "sudo sysadminctl interactive -secureTokenStatus $currUser"
	
	echo "Is the Secure Token Enabled? (y/n) capitalization matters."
	printf ">: "
	read secToken
	
	if [[ $secToken == "n" || $secToken == "N" ]]; then
		echo "Running command to enable Secure Token."
		sleep 1
		echo "You'll be first prompted for the admin password twice, then the user password"
		sleep 1
		echo "If a popup appears, use admin and admin password."
		sleep 1
		su admin -c "sudo sysadminctl interactive -secureTokenOn $currUser -password -"

		echo "Checking to verify that the secure token has been enabled"
		sleep 1
		su admin -c "sudo sysadminctl interactive -secureTokenStatus $currUser"
		
		echo "Done! Feel free to close terminal at this time."
	fi
}

function accountPasswordFix() {
	userAccountName="$(whoami)"
	echo "$userAccountName"

	echo "Type the number of the step you'd like to resolve:"
	echo "1) Fix password (Remove user and log back in)"
	echo "2) Fix Secure Token (Post removal of user and logging back in)"
	echo "3) Quit"
	echo ""
	printf ">: "

	read accountRequest

	if [[ $accountRequest == 1 || $accountRequest == 2 ]]; then
		if [[ $accountRequest == 1 ]]; then
			echo "Type in local admin password."
			sleep 1
			su admin -c "sudo dscl . -delete /Users/'${userAccountName}'"
			sleep 1
			echo "Account removed, log out of user and have them login under Other User"
			sleep 10
		elif [[ $accountRequest == 2 ]]; then
			echo "Starting Secure Token Enablement"
			sleep 2
			secureTokenSetup
		fi
	fi

	

}

# Bash setup to get the computer on the AD Server

if [ "$1" == "-renameComputer" ]; then
	# Renames the computer for you
	computerRename
	
elif [ "$1" == "-fullSetup" ]; then
	# Prompt to add to Smart Sheets
	smartSheetsPrompt

	# Make a copy of the script in the shared folder
	scriptCopy
		
	# Modify the name of the computer
	computerRename
	
	# Bind to ad
	activeDirectoryJoin
	
	# Keeps the admin password in a cache temporarily (or at least attempts to)
	credentialCache

	# Load Homebrew and utilities
	homebrewInstall

	# Install the necessary applications
	reloadApps

	# Set the applications to the dock properly
	appLayout

	# Check that applications downloaded successfully
	#appsDownloaded

	# Validate applications downloaded properly
	appValidate

	# Fixes application permision once loaded
	permissionsFix

	# Download Meraki onto the computer
	merakiSetup
		
	# Enable Firewall and Download Sophos
	sophosSecurity

	# Add printers
	printerCheck

	# Set Adobe Acrobat as the default application
	echo ""
	echo "Setting some default applications."
	sleep 1
	duti -s com.adobe.reader .pdf all
	echo ""
	echo "Adobe Acrobat has been set as the default application"
	sleep 1
	
	# Have the admin set the homepage information for the user
	echo ""
	echo "Opening Chrome so you can set the home page to myapps.microsoft.com (set as default app as well)"
	sleep 2
	open -a "Google Chrome"
	read -p "Press Enter to continue [ENTER]>: "
	osascript -e 'quit application "Google Chrome"'

	echo ""
	echo "Reopening chrome, turn on automatic updates and approve opening from the internet if you see that popup"
	sleep 2
	open -a "Google Chrome"
	read -p "Press Enter to continue [ENTER]>: "
	osascript -e 'quit application "Google Chrome"'

	echo ""
	echo "Opening Safari and set the home page to myapps.microsoft.com"
	sleep 2
	open -a "Safari"
	read -p "Press Enter to continue [ENTER]>: "
	osascript -e 'quit application "Safari"'
	
	sleep 3

	echo ""
	read -p "Time for cleanup, when ready to proceed press enter. [ENTER]>: "
	sleep 1

	echo "$adminPW" | sudo -S -v

	sh /Users/Shared/'${my_name}' cleanup

	#echo "type in the first.lastname of the user we are adding to this computer"
	#read
	#ditto /Users/admin /Users/
	
	# Update System
	updateSystem

elif [ "$1" == "-ADJoin" ]; then
	# Prompt to add to Smart Sheets
	smartSheetsPrompt

	# Make a copy of the script in the shared folder
	scriptCopy
		
	# Modify the name of the computer
	computerRename
	
	# Bind to ad
	activeDirectoryJoin
	
	# Keeps the admin password in a cache temporarily (or at least attempts to)
	credentialCache

	# Load Homebrew and utilities
	homebrewInstall

	# Install the necessary applications
	reloadApps

	# Set the applications to the dock properly
	#appLayout

	# Check that applications downloaded successfully
	#appsDownloaded

	# Validate applications downloaded properly
	appValidate

	# Fixes application permision once loaded
	permissionsFix

	# Download Meraki onto the computer
	#merakiSetup
		
	# Enable Firewall and Download Sophos
	sophosSecurity

	# Add printers
	printerCheck
	
	# Update System
	updateSystem
	
	
elif [ "$1" == "unbind" ]; then
	unbindUser
	
elif [ "$1" == "-setup" ]; then
	# Make sure user is an administrator
	addAdmin

	# Make sure the secure token status is valid
	secureTokenSetup

	# Load remaining applications and redo the layout
	appLayout

	# Set Adobe Acrobat as the default application
	echo ""
	echo "Setting some default applications."
	sleep 1
	duti -s com.adobe.reader .pdf all
	echo ""
	echo "Adobe Acrobat has been set as the default application"
	sleep 1
	
	# Have the admin set the homepage information for the user
	echo ""
	echo "Opening Chrome so you can set the home page to myapps.microsoft.com (set as default app as well)"
	sleep 2
	open -a "Google Chrome"
	read -p "Press Enter to continue [ENTER]>: "
	osascript -e 'quit application "Google Chrome"'

	echo ""
	echo "Reopening chrome, turn on automatic updates and approve opening from the internet if you see that popup"
	sleep 2
	open -a "Google Chrome"
	read -p "Press Enter to continue [ENTER]>: "
	osascript -e 'quit application "Google Chrome"'

	echo ""
	echo "Opening Safari and set the home page to myapps.microsoft.com"
	sleep 2
	open -a "Safari"
	read -p "Press Enter to continue [ENTER]>: "
	osascript -e 'quit application "Safari"'
	
	sleep 3

	echo ""
	read -p "Time for cleanup, when ready to proceed press enter. [ENTER]>: "
	sleep 1
	echo "Type in the admin password"
	printf ">: "
	su admin -c "sh /Users/Shared/'${my_name}' cleanup"
	
elif [ "$1" == "-appLoad" ]; then
	my_name=$(basename -- "$0")

	brewCheck

	# Keeps the admin password in a cache temporarily (or at least attempts to)
	echo "Type in the Admin password for this computer to start the app installation process (it may ask again while running)"
	read -s adminPW
	echo "$adminPW" | sudo -S -v

	# Install the necessary applications
	reloadApps

	# Set Layout
	appLayout
	
	# Cleanup the unneeded files
	brew cleanup
	
	# Allow other users to utilize Homebrew
	# chgrp -R admin /usr/local/*
	# chmod -R g+w /usr/local/*

elif [ "$1" == "-sophos" ]; then
	# Load privacy settings
	sophosSecurity
	
elif [ "$1" == "cleanup" ]; then
	my_name=$(basename -- "$0")
	echo "You may be prompted for the admin password a few times, removing Homebrew"
	sleep 2
	yes "" | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"
	
	#echo "Adding Printers"

	#printerCheck
	
	echo "All done!, feel free to close the terminal and restart the computer at this point."
	
	sleep 10
	exit

elif [ "$1" == "-secureToken" ]; then
	secureTokenSetup
		
elif [ "$1" == "-noAD" ]; then
	# Prompt to add to Smart Sheets
	smartSheetsPrompt

	# Make a copy of the script in the shared folder
	scriptCopy
		
	# Modify the name of the computer
	computerRename
	
	# Keeps the admin password in a cache temporarily (or at least attempts to)
	credentialCache

	# Load Homebrew and utilities
	homebrewInstall

	# Install the necessary applications
	reloadApps

	# Set the applications to the dock properly
	appLayout

	# Validate applications downloaded properly
	appValidate

	# Fixes application permision once loaded
	permissionsFix

	# Download Meraki onto the computer
	merakiSetup
		
	# Enable Firewall and Download Sophos
	sophosSecurity

	# Add printers
	printerCheck
	
	# Update System
	updateSystem

elif [ "$1" == "-permissions" ]; then
	# Fix Permissions
	permissionsFix

elif [ "$1" == "-printers" ]; then
	# Add Printers
	printerCheck
elif [ "$1" == "-loanerSetup" ]; then
	brewCheck
	
elif [ "$1" == "-AccountFix" ]; then
	accountPasswordFix
	exit
elif [ "$1" == "-appLayout" ]; then
	applayout
	exit
else
	my_name=$(basename -- "$0")
	# Make a copy of the script in the shared folder
	
	mydir=$(dirname "$0")
	#cp "${mydir}"/"${my_name}" /Users/Shared

	clear

	echo "+---------------------------------------------------+"
	echo "| ___  ___             _____           _       _    |"
	echo "| |  \/  |            /  ___|         (_)     | |   |"
	echo "| | .  . | __ _  ___  \  --.  ___ _ __ _ _ __ | |_  |"
	echo "| | |\/| |/ _' |/ __|  '--. \/ __| '__| | '_ \| __| |"
	echo "| | |  | | (_| | (__  /\__/ / (__| |  | | |_) | |_  |"
	echo "| \_|  |_/\__,_|\___| \____/ \___|_|  |_| .__/ \__| |"
	echo "|                                       | |         |"
	echo "|                                       |_|         |"
	echo "+---------------------------------------------------+"
	echo ""
	echo "Welcome to the Mac Setup Script"
	echo "Type in the number for the action you'd like to complete:"

	#echo "0) Full Setup       - Sets user up fully from admin (DO NOT USE)"
	echo "1) Setup Admin(AD)  - Joins the computer to the Active Directory."
	echo "2) Setup User       - Sets up the user account"
	echo "3) Rename Computer  - Renames the computer for you."
	echo "4) Add Printers     - Adds Printers via SiteCode"
	echo "5) Admin w/o AD     - Sets up admin without AD (We Work)"
	echo "6) Account PW Fix   - Fixes the disconnect on SSO and local PW"
	echo "7) Secure Token Fix - Fixing the secure token"
	echo "8) Redo App Layout  - Fixes app layout"
	echo "9) Quit             - Quit the setup application"
	echo ""
	printf ">: "
	read userResponse 

	#if [ $userResponse == "0" ]; then
	#	echo "Beginning Full Setup"
	#	sleep 2
	#	caffeinate -u sh "${mydir}"/"${my_name}" -fullSetup

	if [ $userResponse == "1" ]; then
		echo "Beginning ADJoin initial Setup"
		sleep 2
		caffeinate -u sh "${mydir}"/"${my_name}" -ADJoin

	elif [ $userResponse == "2" ]; then
		echo "Beginning Setup Process"
		sleep 2
		caffeinate -u sh "${mydir}"/"${my_name}" -setup

	elif [ $userResponse == "3" ]; then
		echo "Beginning Renaming Procedure"
		sleep 2
		caffeinate -u sh "${mydir}"/"${my_name}" -renameComputer

	elif [ $userResponse == "4" ]; then
		echo "Beginning Printer Setup Process"
		sleep 2
		caffeinate -u sh "${mydir}"/"${my_name}" -printers
	
	elif [ $userResponse == "5" ]; then
		echo "Beginning Printer Setup Process"
		sleep 2
		caffeinate -u sh "${mydir}"/"${my_name}" -noAD

	elif [ $userResponse == "6" ]; then
		echo "Beginning Account Password Fix Process"
		sleep 2
		caffeinate -u sh "${mydir}"/"${my_name}" -AccountFix

	elif [ $userResponse == "7" ]; then
		echo "Beginning Secure Token Fix Process"
		sleep 2
		caffeinate -u sh "${mydir}"/"${my_name}" -secureToken
	elif [ $userResponse == "8" ]; then
		echo "Fixing App layout"
		sleep 2
		caffeinate -u sh "${mydir}"/"${my_name}" -appLayout
	else
		echo "Quitting application, thank you!"
		echo "Close this window at any time."
		sleep 5
		exit

	fi


fi
